  # module.networks.google_compute_firewall.default-allow-internal will be created
  + resource "google_compute_firewall" "default-allow-internal" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "default-allow-internal"
      + network            = "my-vpc"
      + priority           = 1000
      + project            = "cloudchamp"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "10.0.0.0/16",
        ]

      + allow {
          + ports    = [
              + "0-65535",
            ]
          + protocol = "tcp"
        }
      + allow {
          + ports    = [
              + "0-65535",
            ]
          + protocol = "udp"
        }
      + allow {
          + ports    = []
          + protocol = "icmp"
        }
    }

  # module.networks.google_compute_firewall.deny_all_ext will be created
  + resource "google_compute_firewall" "deny_all_ext" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "deny-all"
      + network            = "my-vpc"
      + priority           = 1000
      + project            = "cloudchamp"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]

      + deny {
          + ports    = [
              + "0-65535",
            ]
          + protocol = "tcp"
        }
      + deny {
          + ports    = [
              + "0-65535",
            ]
          + protocol = "udp"
        }
      + deny {
          + ports    = []
          + protocol = "icmp"
        }
    }

  # module.networks.google_compute_network.my_cloud_ntwrk will be created
  + resource "google_compute_network" "my_cloud_ntwrk" {
      + auto_create_subnetworks                   = false
      + delete_default_routes_on_create           = false
      + gateway_ipv4                              = (known after apply)
      + id                                        = (known after apply)
      + internal_ipv6_range                       = (known after apply)
      + mtu                                       = (known after apply)
      + name                                      = "my-vpc"
      + network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      + numeric_id                                = (known after apply)
      + project                                   = "cloudchamp"
      + routing_mode                              = (known after apply)
      + self_link                                 = (known after apply)
    }

  # module.networks.google_compute_router.nat_router will be created
  + resource "google_compute_router" "nat_router" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "nat-router"
      + network            = "my-vpc"
      + project            = "cloudchamp"
      + region             = "us-central1"
      + self_link          = (known after apply)
    }

  # module.networks.google_compute_router_nat.nat_config will be created
  + resource "google_compute_router_nat" "nat_config" {
      + auto_network_tier                   = (known after apply)
      + enable_dynamic_port_allocation      = (known after apply)
      + enable_endpoint_independent_mapping = (known after apply)
      + endpoint_types                      = (known after apply)
      + icmp_idle_timeout_sec               = 30
      + id                                  = (known after apply)
      + min_ports_per_vm                    = (known after apply)
      + name                                = "nat-config"
      + nat_ip_allocate_option              = "AUTO_ONLY"
      + project                             = "cloudchamp"
      + region                              = "us-central1"
      + router                              = "nat-router"
      + source_subnetwork_ip_ranges_to_nat  = "ALL_SUBNETWORKS_ALL_IP_RANGES"
      + tcp_established_idle_timeout_sec    = 1200
      + tcp_time_wait_timeout_sec           = 120
      + tcp_transitory_idle_timeout_sec     = 30
      + udp_idle_timeout_sec                = 30
    }

  # module.networks.google_compute_subnetwork.integ_utils will be created
  + resource "google_compute_subnetwork" "integ_utils" {
      + creation_timestamp         = (known after apply)
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + internal_ipv6_prefix       = (known after apply)
      + ip_cidr_range              = "10.1.0.0/16"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "subnet-desktops"
      + network                    = (known after apply)
      + private_ip_google_access   = true
      + private_ipv6_google_access = (known after apply)
      + project                    = "cloudchamp"
      + purpose                    = (known after apply)
      + region                     = "europe-west1"
      + secondary_ip_range         = (known after apply)
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)

      + log_config {
          + aggregation_interval = "INTERVAL_10_MIN"
          + filter_expr          = "true"
          + flow_sampling        = 0.5
          + metadata             = "INCLUDE_ALL_METADATA"
        }
    }

  # module.networks.google_compute_subnetwork.kube_apps will be created
  + resource "google_compute_subnetwork" "kube_apps" {
      + creation_timestamp         = (known after apply)
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + internal_ipv6_prefix       = (known after apply)
      + ip_cidr_range              = "10.2.0.0/16"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "subnet-preprod"
      + network                    = (known after apply)
      + private_ip_google_access   = true
      + private_ipv6_google_access = (known after apply)
      + project                    = "cloudchamp"
      + purpose                    = (known after apply)
      + region                     = "europe-west1"
      + secondary_ip_range         = [
          + {
              + ip_cidr_range = "10.21.0.0/16"
              + range_name    = "range-pods"
            },
          + {
              + ip_cidr_range = "10.22.0.0/16"
              + range_name    = "range-services"
            },
        ]
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)

      + log_config {
          + aggregation_interval = "INTERVAL_10_MIN"
          + filter_expr          = "true"
          + flow_sampling        = 0.5
          + metadata             = "INCLUDE_ALL_METADATA"
        }
    }

  # module.networks.google_compute_vpn_gateway.vpn_gw will be created
  + resource "google_compute_vpn_gateway" "vpn_gw" {
      + creation_timestamp = (known after apply)
      + gateway_id         = (known after apply)
      + id                 = (known after apply)
      + name               = "vpn-gateway"
      + network            = "my-vpc"
      + project            = "cloudchamp"
      + region             = "europe-west1"
      + self_link          = (known after apply)
    }

  # module.networks.google_compute_vpn_tunnel.vpn_tunnel will be created
  + resource "google_compute_vpn_tunnel" "vpn_tunnel" {
      + creation_timestamp      = (known after apply)
      + detailed_status         = (known after apply)
      + effective_labels        = (known after apply)
      + id                      = (known after apply)
      + ike_version             = 2
      + label_fingerprint       = (known after apply)
      + local_traffic_selector  = (known after apply)
      + name                    = "vpn-tunnel"
      + peer_ip                 = "213.41.212.71"
      + project                 = "cloudchamp"
      + region                  = "europe-west1"
      + remote_traffic_selector = (known after apply)
      + self_link               = (known after apply)
      + shared_secret           = (sensitive value)
      + shared_secret_hash      = (known after apply)
      + target_vpn_gateway      = "vpn-gateway"
      + terraform_labels        = (known after apply)
      + tunnel_id               = (known after apply)
      + vpn_gateway             = "vpn-gateway"
    }

  # module.networks.google_dns_managed_zone.zone will be created
  + resource "google_dns_managed_zone" "zone" {
      + creation_time    = (known after apply)
      + description      = "Managed by Terraform"
      + dns_name         = "myDomain.com."
      + effective_labels = (known after apply)
      + force_destroy    = false
      + id               = (known after apply)
      + managed_zone_id  = (known after apply)
      + name             = "my-zone"
      + name_servers     = (known after apply)
      + project          = "cloudchamp"
      + terraform_labels = (known after apply)
      + visibility       = "public"

      + dnssec_config {
          + kind          = "dns#managedZoneDnsSecConfig"
          + non_existence = "nsec3"
          + state         = "on"
        }
    }

  # module.networks.google_dns_record_set.domain-record will be created
  + resource "google_dns_record_set" "domain-record" {
      + id           = (known after apply)
      + managed_zone = "my-zone"
      + name         = "www.myDomain.com."
      + project      = "cloudchamp"
      + rrdatas      = [
          + "192.0.2.1",
        ]
      + ttl          = 300
      + type         = "A"
    }

  # module.networks.google_logging_project_sink.audit_logs will be created
  + resource "google_logging_project_sink" "audit_logs" {
      + destination            = "storage.googleapis.com/cloudchamp-audit-logs"
      + filter                 = "logName:\"logs/cloudaudit.googleapis.com\""
      + id                     = (known after apply)
      + name                   = "audit-logs-sink"
      + project                = (known after apply)
      + unique_writer_identity = true
      + writer_identity        = (known after apply)
    }

  # module.networks.google_monitoring_notification_channel.email will be created
  + resource "google_monitoring_notification_channel" "email" {
      + display_name        = "Email Notification Channel"
      + enabled             = true
      + force_delete        = false
      + id                  = (known after apply)
      + labels              = {
          + "email_address" = "rami.dahmouni@carbon-it.com"
        }
      + name                = (known after apply)
      + project             = "cloudchamp"
      + type                = "email"
      + verification_status = (known after apply)
    }

  # module.networks.google_storage_bucket.audit_logs_bucket will be created
  + resource "google_storage_bucket" "audit_logs_bucket" {
      + effective_labels            = (known after apply)
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "EU"
      + name                        = "cloudchamp-audit-logs"
      + project                     = (known after apply)
      + project_number              = (known after apply)
      + public_access_prevention    = (known after apply)
      + rpo                         = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "STANDARD"
      + terraform_labels            = (known after apply)
      + uniform_bucket_level_access = (known after apply)
      + url                         = (known after apply)
    }

Plan: 14 to add, 0 to change, 0 to destroy.
module.networks.google_monitoring_notification_channel.email: Creating...
module.networks.google_compute_network.my_cloud_ntwrk: Creating...
module.networks.google_dns_managed_zone.zone: Creating...
module.networks.google_storage_bucket.audit_logs_bucket: Creating...
module.networks.google_storage_bucket.audit_logs_bucket: Creation complete after 3s [id=cloudchamp-audit-logs]
module.networks.google_logging_project_sink.audit_logs: Creating...
╷
│ Error: Error creating ManagedZone: googleapi: Error 403: Cloud DNS API has not been used in project cloudchamp before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/dns.googleapis.com/overview?project=cloudchamp then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry.
│ Details:
│ [
│   {
│     "@type": "type.googleapis.com/google.rpc.Help",
│     "links": [
│       {
│         "description": "Google developers console API activation",
│         "url": "https://console.developers.google.com/apis/api/dns.googleapis.com/overview?project=cloudchamp"
│       }
│     ]
│   },
│   {
│     "@type": "type.googleapis.com/google.rpc.ErrorInfo",
│     "domain": "googleapis.com",
│     "metadata": {
│       "consumer": "projects/cloudchamp",
│       "service": "dns.googleapis.com"
│     },
│     "reason": "SERVICE_DISABLED"
│   }
│ ]
│ , accessNotConfigured
│
│   with module.networks.google_dns_managed_zone.zone,
│   on modules\networks\dns.tf line 1, in resource "google_dns_managed_zone" "zone":
│    1: resource "google_dns_managed_zone" "zone" {
│
╵
╷
│ Error: googleapi: Error 403: Permission 'logging.sinks.create' denied on resource (or it may not exist).
│ Details:
│ [
│   {
│     "@type": "type.googleapis.com/google.rpc.ErrorInfo",
│     "domain": "iam.googleapis.com",
│     "metadata": {
│       "permission": "logging.sinks.create"
│     },
│     "reason": "IAM_PERMISSION_DENIED"
│   }
│ ]
│ , forbidden
│
│   with module.networks.google_logging_project_sink.audit_logs,
│   on modules\networks\gc-monitoring.tf line 1, in resource "google_logging_project_sink" "audit_logs":
│    1: resource "google_logging_project_sink" "audit_logs" {
│
╵
╷
│ Error: Error creating NotificationChannel: googleapi: Error 403: Permission denied (or the resource may not exist).
│
│   with module.networks.google_monitoring_notification_channel.email,
│   on modules\networks\gc-monitoring.tf line 14, in resource "google_monitoring_notification_channel" "email":
│   14: resource "google_monitoring_notification_channel" "email" {
│
╵
╷
│ Error: Error creating Network: googleapi: Error 403: Required 'compute.networks.create' permission for 'projects/cloudchamp/global/networks/my-vpc', forbidden
│
│   with module.networks.google_compute_network.my_cloud_ntwrk,
│   on modules\networks\networks.tf line 12, in resource "google_compute_network" "my_cloud_ntwrk":
│   12: resource "google_compute_network" "my_cloud_ntwrk" {
│
╵

